Summary for Build Full Stack Doctor Appointment Booking System Using MERN Stack | Complete React JS Project

Title: "Complete Doctor Appointment Booking System with Online Payment using MERN Stack | React JS Project Tutorial"

Building full stack doctor appointment booking system using MERN Stack
- Three levels of login: patient, doctor, and admin with specific functionalities
- Features include online payment gateway, doctor selection, appointment booking, and account creation

User can log in, view profiles, make appointments, view appointments, and admin can manage doctors.
- User can log in with email and password, view profile details, and edit profile information.
- User can make appointments with doctors, view upcoming appointments, cancel appointments, and pay appointment fees online.

Creating a full stack project using MERN stack
- The project is designed for the developer community to learn and customize
- Involves creating the front end project using React, installing dependencies and running the project

Setting up project environment for MERN stack
- Clearing default project files and folders
- Adding Tailwind support to the project

Creating folder structure and context for front-end project
- Setting up folder structure in the SRC folder and creating components and pages
- Creating context for managing user login and other context data

Creating different pages in the Pages folder for doctor appointment booking system.
- Various pages like contact, about, login, profile, and my appointments are being created using afce/rce components.
- Setting up routes for the created pages by adding class name property and margins in app.jsx file.

Create multiple routes for different pages in application
- Specialist doctor will be visible upon clicking on a specific specialist
- Each page has a unique path and corresponding component imported for rendering

Creating and Mounting Navar component for navigation bar
- Create Navar component in components folder with Navar.jsx file
- Mount the Navar component in app.jsx outside of routes for visibility in all pages

Styling UL and HR tags with CSS
- Adding classes for padding and background color
- Setting primary color in Tailwind CSS config file

Setting up navigation paths for homepage and other pages
- Defining paths in app.jsx file for the homepage and other pages
- Implementing the active class name to add underline effect on the active menu link

Setting up boolean state variables for user authentication and conditional rendering
- Using setter functions to initialize and update state variables for user and token
- Implementing conditional rendering based on the value of the token state variable

Adding class name properties for image and div elements
- Adding specific class names for styling such as width and border radius for the image
- Defining CSS properties such as Flex item Center Gap cursor pointer group relative for the div

Creating profile navigation and header component
- Hiding profile icon and drop down with onclick property
- Creating header component with background, text, and image

Create left side and right side structure with content and images
- Add div for displaying content on the left side with paragraph tag and appointment text
- Add image and description in a div and a link for booking appointment on the left side, and an image on the right side

Implementing CSS properties and smooth scrolling for the header section
- Setting class name and CSS properties for the image and button
- Adding smooth scroll functionality for the speciality section

Mounting components and adding data
- Mounting components in the homepage file after the header
- Adding title, description, menu with image and name using assets.js file

Adding CSS properties to improve the appearance
- Adding width and text properties to adjust the description
- Adding CSS properties for the list, images, and link tags to improve the layout and behavior

Creating Specialty Menu to Display Doctors
- Specialty menu displays doctors based on selected specialty
- Added onClick property to scroll to all doctors page and top of webpage

Adding CSS properties to display doctor's profile information
- Added flex properties for layout alignment and margin adjustments
- Styled text elements such as H1 tag and paragraph for better presentation

Adding CSS properties to image tag and division elements
- Setting background blue and width 50 for image tag
- Setting padding, flex properties, and text color for division element

Creating context for common logics
- Create a new file appContext.jsx in the context folder.
- Import the doctors from the assets and add it to the context for access.

Integrating context support in front end project
- Added app context provider tag wrapping the app component
- Removed direct import and used context to get doctors data

Adding text, button, and doctor's image to the webpage layout
- Creating divs for left and right sides and adding relevant contents
- Adding CSS properties for the layout and the doctor's image

Adding CSS properties for different elements
- Adding styles for image alignment and sizing for different screen sizes
- Applying styles for text alignment, size, and margin for paragraph and button elements

Creating left, center, and right sections with specific content
- Adding logo and text in the left section
- Structuring heading and list items in the center section
- Adding heading and text in the right section

Adding structure and styling to footer section
- Creating columns with random phone number and email ID
- Adding horizontal line, copyright text, and CSS properties for design

Update font in project UI and create doctor pages
- Update font in project UI by adding font family properties and saving changes
- Create doctor pages to display all doctors based on category and speciality, using useParams hook and setting up navigation

Creating the UI for displaying doctor's data
- Fetching all doctor's data from the context
- Designing and adding the UI elements for doctor's display

Implementing filtering and navigation functionality for doctor appointments.
- Utilize 'useEffect' hook to apply filters for doctors based on speciality changes.
- Implement navigation functionality using 'useNavigate' for redirecting to appointment page.

Adding CSS properties to the elements.
- Adding specific CSS properties to the P tag and div.
- Adding CSS properties for menu, buttons, and flex properties.

Implement dynamic styling based on doctor speciality
- Utilized template literals to dynamically assign styling properties
- Implemented logic to change background color and text color based on selected speciality

Display doctor's data, booking slot, and related doctors on appointment page.
- Fetch doctor's ID and data to display on appointment page.
- Display booking slot options for the next 7 days, timing, and related doctors.

Display doctor's image and details using doc info
- Create div and add image tag with doc info image property for the doctor's image display
- Display doctor's details like name, degree, and experience using doc info data

Adding doctor information and experience
- Displaying degree and speciality of the doctor
- Showing the doctor's experience and about information

Customize Currency Symbol in Doctor Appointment Booking System
- Add CSS properties to customize text style and appearance on the web page
- Integrate and display the currency symbol dynamically from the context file

Creating state variables to store slot data and calculating available slots
- Updating currency symbol for benefit in context file and adding CSS properties for P tag
- Creating State variables for doctors slot, slot index, and slot time to store and calculate data for booking slots

Setting up date and time for appointment slots
- Using the 'get' method to determine future dates and times for appointment slots
- Defining end times and checking current date to set up appointment slots accordingly

Setting up time slots for appointment bookings
- Starting time slots from current hour, specific intervals, and future date adjustments.
- Creating time slots in 30-minute intervals by setting hours and minutes.

Fix code error in date format
- Corrected date format from 1 to I in the code
- Displayed booking slots for each day with 22 time slots

Implementing CSS properties for booking slots display
- Setting margin, padding, font weight, and text color for slot display
- Utilizing conditional rendering based on Dr slots availability for proper date and day display

Displaying time of selected date
- Creating div to add time for selected date
- Adding CSS properties for better display

Adding dynamic class names and onclick property
- Added dynamic class names to highlight the selected time slot
- Implemented onclick property to set the selected time slot

Filter doctors based on speciality using props and useEffect hook
- Use props to get speciality and doctors data
- Filter doctors based on speciality and exclude current doctor using filter method

Implementing doctor's design and navigation function
- Copying and pasting the design from one file to another
- Adding a navigation function to navigate to the top of the page

Adding CSS properties for section elements
- Adding class name and text properties for the about us section to center and style the text.
- Adding CSS properties to align the image and text side by side, and styling the image and text in the right section.

Creating Divs and adding text in uppercase with CSS properties
- Adding divs and creating P tag with text in uppercase
- Styling the text with CSS properties like text-gray-700 and font-semi-bold

Creating a section with image, text, and button
- Adding the image tag and text div for left and right side respectively
- Adding P tags for text, BR tags for line break, and button tag for the button

Applying CSS properties for different sections of the web page
- CSS properties like margin, flexbox, text size were applied for the main section to style it.
- Further, CSS properties like width, max-width were applied for the image and alignment for the right section was adjusted.

State initialization and form creation
- State variables email, password, and name are created and initialized.
- Form tag and onSubmit Handler function are added with preventDefault functionality.

Implementing dynamic text based on state changes
- Creating logic to display 'Sign up' or 'Login' text based on state
- Updating text dynamically based on state changes

Adding CSS properties and modifying input fields for a full stack doctor appointment booking system
- Add CSS class name with specified properties to divs for styling
- Modify onchange and value property for each input field to set email and password states

Implementing logic for account creation and login state
- Adding CSS properties and setting up onclick event for account creation and login
- Updating state and implementing functionality for switching between login and create account options

Creating user details object for appointment booking system
- Adding email ID, phone number, and address to the user object
- Displaying user image and username on the profile page

Implement editing functionality based on condition
- Edit condition to display input field or paragraph text based on status
- Implement onchange event to update user data when editing the name

Updating address and basic information on the web page
- Making the address fields editable to update the address using the onchange property and nested spread operator
- Displaying and updating the gender using the select tag and option tags

Adding gender selection and date input using MERN Stack
- Use onchange property to update object data when the gender is changed
- Displaying and editing user's date of birth

Adding CSS properties to design layout
- Adding CSS properties to div, image tag, name, input field, P tag, and HR tag for styling
- Ensuring elements have appropriate styling such as width, border radius, font size, colors, and layout adjustments

Styling and formatting the doctor appointment booking web page
- Adding CSS properties to the div to create grid layout and define text color
- Applying class names to format specific elements such as font, text color, and background

Adding UI design for profile page and functionality for editing profile picture
- Added CSS properties to style buttons and hover effects
- Prepared UI design based on Figma design and planned backend functionality for editing profile picture

Display doctor data in appointments page
- Create text in my appointments file and structure it with P tag and div
- Utilize context to fetch and display doctor's data with map method

Creating responsive components in MERN stack project
- Adding pay online and cancel buttons in the component
- Applying CSS properties for layout and styling

Customize styling for elements on the webpage
- Adding class names and CSS properties to adjust text size and color
- Arranging buttons in a column with specific styling for different screen sizes

Creating a mobile menu for the application
- Adding a class name and setting size for the menu icon to hide it on large and medium screens
- Linking state variable with the menu icon for display functionality

Adding CSS properties for mobile menu
- Adding hidden property for medium screen
- Using dynamic classes and ternary operator to toggle menu visibility

Adding CSS properties to menu links
- Added class name property with padding, border, radius, inline, block
- Used active class name to provide background color using media query

Adding filter button to toggle menu display
- Remove existing class names from P tags and apply new class name for background color
- Implement toggle functionality using state variable and on click event for filter button

Completed front-end development, now shifting to back-end implementation.
- Tested and ensured responsiveness of UI for different views such as about page, contact page, profile page, and my appointments page in phone view.
- Started preparing for back-end by creating a new folder for back-end and a server.js file in it.

Setting up the backend server for the MERN stack project
- Initialize the backend by creating a package.json file and setting up the start script
- Install necessary dependencies like express, multer, bcrypt, cloudinary, dotenv, jsonwebtoken, nodemon, and validator

Setting up and running a simple Express app
- Creating endpoints and adding comments for API
- Starting and running the server using the port number

Creating server script to restart backend server for changes
- Add node Monon server.js script to restart server after changes
- Create folder structure for backend project with config, controllers, middleware, and models folders

Setting up database user and connection string
- Create a database user with a password for access
- Copy the MongoDB connection string and set it as an environment variable

Establishing connection with MongoDB Atlas database
- Setting up the MongoDB DB URI using template literal and environment variables
- Creating a new database named RemediKonnect upon successful connection

Configuring Cloud NY storage with API key and secret key
- Importing Cloud NY V2 and creating a function to connect
- Using cloud ny.config function to configure Cloud NY with API key and secret key

Creating Doctor Model in MERN Stack
- Creating a schema for storing doctor data including name, email, and password.
- Ensuring unique email IDs for each doctor profile to maintain data integrity.

Creation of doctor model and schema in MERN stack project.
- Create doctor model using doctor schema to store doctor data in the database.
- Include fields like ID, name, image, speciality, degree, experience, fees, address, email, password, slots booked, and date.

Creating user model in MERN stack project.
- Import MongoDB package and define user schema with necessary properties such as name, email, password, image, address, gender, date of birth, and phone number.
- Set default values for properties like gender, date of birth, and phone number in user schema.

Creating controller functions for APIs and admin panel design
- Creating multiple controller functions for multiple APIs
- Designing admin panel with features like admin and doctor login, and adding new doctor through admin panel

Implementing Multer middleware for file storage and route creation
- Create a new file named multer.js in the middleware folder and import multer package
- Define disk storage configuration and create an instance of multer using this configuration, then export the upload from the file

Adding admin router and endpoint in MERN stack
- Importing admin router and adding the SL API endpoint SL admin
- Implementing logic to receive information and image file in admin controller.js file

Adding fields for doctor appointment booking form
- Fields added include name, email, password, degree, experience, about, fee, address, and image
- Demonstration of sending the form data and checking the console log for the output

Data validation and input checking
- Validation process for checking missing details and prompting user if any data is empty.
- Further validation process for email format and password strength.

Encrypting and saving passwords using bcrypt package
- Generate salt for password hashing with bcrypt genSalt method
- Encrypt user password using bcrypt hash method with provided salt

Storing doctor data in the database
- Import Dr model for database manipulation and create a new doctor entry.
- Save the doctor data in the database, provide success and error responses.

Configuring assets and resolving validation errors in project setup
- Copying and pasting description, fee, address, email, and image for doctor's profile.
- Fixing errors and validations in JSON objects for successful data submission.

Creating login functionality for admin
- Creating an async arrow function named login admin to handle admin login
- Implementing token creation using email and password validation

Generate token based on email and password match
- Check if email and password match the stored credentials
- Generate and send token using JWT if match, else return invalid credentials message

Implementing admin authentication middleware
- Creating an async Arrow function named 'oAdmin' to handle admin authentication middleware
- Verifying the token in the API call headers and allowing access based on token verification

Adding token verification and authentication middleware for doctor appointment booking system using MERN stack.
- In the token verification method, a token and JWT secret are provided and then decoded to obtain the email ID and password.
- The middleware is successfully created and added to the add admin route in the Au admin file for the MERN stack system.

Setting up admin panel for doctor appointment booking system
- Creating a new React project for the admin panel using npm create
- Installing and configuring dependencies such as AOS package, react-router-dom, and react-toastify for the admin project

Setting up and running the project on specific ports
- Define and add the port number for the admin project and frontend
- Open and check the project running successfully on the designated ports

Setting up admin assets and context for the project.
- Insert admin assets including images and icons into the project folder.
- Create app, admin, and Doctor contexts for the admin panel.

Creating context providers for different roles
- Creating app context provider for general functionality and accessibility across components
- Creating admin context provider for admin login and token logic

Creating and managing state variables for admin and doctor login
- Using 'useState' to manage the state in React component
- Adding condition to initialize the state with 'admin' for default admin login

Adding email and password input fields with required attribute
- Creating input fields for email and password with required attribute for form submission
- Styling the login form using CSS properties like flex, margin, padding, border, text color

Implementing user login functionality and changing states
- Using ternary operator to check state equality for rendering different elements based on user role
- Adding CSS properties to enhance user experience for login buttons

Setting up admin login logic and UI design
- Creating a state variable to store token in admin context file
- Adding environment variable for backend URL in admin context

Creating form submission function and making API calls based on user's state
- Using onSubmit handler to execute function on form submission and preventing default behavior
- Implementing conditional API call based on user's state using if-else statement

Fetching token from backend and saving it
- Using await to call a POST method to backend URL
- Storing the token in state variable and local storage for session management

Manage admin access with token storage
- Token stored in local storage and state variable for authentication
- Display admin pages based on presence of admin token

Creating dashboard UI design for the admin.
- Implemented token check from local storage for login status.
- Created Navar component and mounted it in app.jsx file for UI design.

Adding CSS properties for admin text, logo, and logout button
- Adding class name, width, and cursor property for the logo image
- Adding class name property, border, padding, rounded corners, and text color for the admin text

Implementing login and logout functionality for the admin panel.
- Logging out removes the token from the token state and local storage.
- Using useNavigate hook to redirect user to homepage upon logout.

Setting up admin dashboard routes and sidebar navigation
- Adding routes for dashboard, appointments, and doctor list
- Creating sidebar navigation with links for dashboard, appointments, add doctor, and doctor list

Adding menu items to sidebar with icons and text
- Create navigation links with icons for dashboard, appointments, add, and users.
- Include corresponding text for each link such as 'Appointments', 'Add Doctor', 'Doctor's List'.

Creating dynamic class names for active navigation links
- Using a dynamic class name approach for indicating active links.
- Applying background color and border changes to highlight active navigation links.

Designing the add doctor page
- Adding form tag and paragraph tag
- Creating label, image, and input field for doctor image upload

Create select tag with options for experience and fee input field
- Add different values using option tag for experience selection
- Create input field for doctor fee and speciality selection using select tag with options

Creating input fields and sections for doctor appointment booking system
- Adding dropdown options for speciality and education details
- Creating input fields for address and About Me section

Adding CSS properties to various elements in the web layout.
- Adding CSS properties to the image tag, including width, background color, border radius, and cursor.
- Applying flex column and flex row for layout responsiveness and adjusting input field width.

Styling input fields using CSS properties
- Added class names for alignment and styling
- Ensured consistent width and appearance for all input fields

Setting state variables and linking to input fields
- Creating state variables for speciality, degree, and address
- Initializing and linking state variables with input fields and select tags

Displaying selected image using MERN stack
- Utilizing temporary URL to display images if not available in state variable.
- Linking input fields with respective state variables using set functions.

Link form submission with API call
- Prevent default form submission behavior using 'event.preventDefault'
- Retrieve backend URL and admin token using useContext hook before making API call

Import and use react-toastify package for error messages handling
- Add toast message for 'Image not selected' error
- Create and append form data with doctor details including image, name, email, password

Logging values using template literals
- Using console log to display the key-value pairs using template literals
- Creating form data and making API call to save doctor's details in the database

Adding Admin Token for Authentication
- Concatenate backend URL for adding doctor and provide form data
- Ensure authentication by adding token in headers for successful storage in database

Resetting input fields and image tag after data submission
- Resetting various input fields such as image, name, password, email, address, degree, about, and fees
- Handling errors and displaying appropriate messages during data submission

Adding 15 doctors to the database and creating API to get all doctors data
- Adding doctors one by one using admin panel
- Creating API controller function to get all doctors' data for admin panel

Saving doctor request and retrieving doctor details for admin panel
- Saving doctor request by clicking send button and viewing response with doctor's details
- Using API to display 15 doctors data on admin panel in all doctors page

Calling the API to get all doctors data and handling the response
- Adding weight and exos manually because suggestion is not received
- Using exos doPost method, concatenating API endpoint, defining headers, handling success and error cases

Creating doctor appointment booking system UI elements
- Adding image tag to display doctor's image fetched from parameter
- Displaying doctor's name, speciality, and availability status

Adding CSS styles to doctor appointment booking webpage
- Adding Tailwind CSS properties for layout and spacing
- Styling text and div elements for doctor information display

Implement functionality to change doctor's availability by updating database
- Create controller function 'changeAvailability' in Dr controller.js file
- Add logic to update available status in the database using doctor ID

Updating doctor's availability status and creating route
- Using the doctor model and find by ID method to update doctor data
- Creating a route and using the change availability endpoint

Implementing update functionality for doctor's availability
- Updating doctor's estate variable by calling the 'getAllDoctors' function after data has been updated
- Handling error message display using 'toast.error' in case the data update is unsuccessful

Setting up environment variables in the front end
- Create a new file 'doEnV' in the front end folder to declare the backend URL as http://localhost:4000
- Update 'appContext.jsx' file to import 'axios' package, retrieve the backend URL from the environment variable, and create a function to call the API for fetching doctor's data

Setting up react toasttify for displaying error notifications
- Importing and setting up react toasttify in the front-end project
- Using toast method from the package to display error notifications in the catch block

Create a function to get all doctors list for front end.
- Define a function 'doctorList' with async-await function to fetch all doctors.
- Exclude password and email properties from the doctor data before sending to front end API.

Creating API logic for user authentication and appointment booking functionality.
- Details about creating the user API controller function with register, login, profile management, appointment booking, displaying, and cancellation functionalities.
- Including the addition of a payment gateway for the booking system.

Implementing validation for name, password, and email fields
- Validate name, password, and email fields to check for empty or undefined properties
- Use validator package to validate the email format and ensure it is correct

Saving user data in the database with password hashing and token creation
- User data including name, email, password, image, address, gender, date of birth, and phone details are saved
- A new user is created using the user model and saved in the database with a token generated using JWT

Setting up JWT authentication and creating user registration route
- Adding JWT secret in .env file and generating token
- Creating user registration function and route in userRoutes.js

Handling user registration errors and validation
- Errors related to duplicate email and weak password are handled effectively
- Email and password validation logic is implemented

Creating a user login function and handling user authentication.
- Adding try-catch block for error handling and user email/password retrieval.
- Finding user data using the email ID and checking user existence with if statement.

Integrating login and registration features with the front end.
- Demonstration of integrating login and registration API endpoints and troubleshooting any issues in the backend
- Explanation of accessing State variables in the front end to handle input field values

Saving user token in context for authentication
- Create a state variable named token in the app context file to store user authentication token
- Destructure Token State, set token function, and backend URL variable in the login.jsx file to use for API call

Linking functions and setting token for user authentication
- Adding onsubmit property in form tag to execute a function upon form submission
- Creating a log out function and linking it with the paragraph tag

Creating and logging in to user accounts through form inputs
- Fixing input field issues by adding e.target.value
- Handling token creation and storage for user authentication

Setting up user authentication and profile retrieval API
- Adding SL login with token management for user authentication and logout functionality
- Creating API to get and display user profile data using user ID obtained from token

Creating user authentication middleware
- Creating a new middleware file named 'AUuser.js'
- Implementing user authentication logic by decoding and using the user ID from the token

Updating user profile with new controller function
- Creating a new controller function to update user profile with comment API
- Fetching user details like name, phone, address, date of birth, etc., from the request to update the profile

Checking and updating user data based on available properties
- Ensure image file is received using Molter library
- Throw error message if essential user data is missing

Updating user profile with image URL.
- Adding user ID for identification.
- Creating response JSON with success message.

Implementing multiple middleware functions for user authentication and data update
- Using two middleware functions to handle form data submission and user authentication for retrieving user ID
- Including an additional upload middleware for passing images before user authentication and data update process

Updating user profile details and image upload functionality
- User profile details like gender, date of birth, and phone number can be updated successfully.
- Image can be uploaded using base 64 encoding, stored in cloud, and displayed in user profile.

Implementing try-catch block in Arrow function
- Adding the try-catch block to handle errors during API call and response handling
- Utilizing useEffect hook to call the loadUserProfileData function based on the presence of token

Creating logic to update user profile data in the database
- Setting up state variables and update function in VS code editor
- Implementing profile update API call for name, phone number, address, gender, and date of birth fields

Adding image tags and input field with type file to select images in HTML form
- Creating image tags and input field with type file in HTML form to allow users to select and display images
- Utilizing event handling and state management to set and display the selected image using JavaScript

Adding CSS properties and logic for image upload and API call
- Adding CSS properties to image tags for rounded width and opacity
- Implementing logic for image upload and making API call for saving data

Updating user profile with optional image
- Fields like name, phone, address, gender, date of birth updated using user data
- Optional image update feature using image State; user can skip updating image if desired

Demonstration of updating profile details and image upload functionality
- Shows how to update name, phone number, address, and date of birth with toast notification for errors.
- Demonstrates how to upload and display profile image, including cloud link retrieval.

Adding logic to book appointments with doctors and saving data in MongoDB database
- Creating appointment model and describing the schema
- Implementing logic to book appointments with doctors in the user controller.js file

Creating appointment model and exporting it
- Creating appointment model with specified schema and exporting it as default
- Booking appointment controller function created to handle booking of appointments

Access and manipulate doctor data in the MERN stack project
- Integrate doctor model for data retrieval and utilize Doctor ID for data selection and manipulation.
- Implement checks for doctor availability for bookings and handle responses accordingly.

Creating and saving appointment data in database
- Retrieve user data using user ID from request body
- Create appointment data object with user ID, doctor ID, slot date, slot time, and other necessary details

Saving new appointment data and updating slots booked in database.
- Using 'save' method to save new appointment data in the database.
- Updating doctor's slot data using 'findOneAndUpdate' method with 'slots booked' variable.

Creating a function to book appointments
- Setting up the backend URL and token for API calls.
- Checking if the user is logged in, displaying a warning if not, and redirecting to the login page.

Implementing login and booking appointment functionality
- Implementing login functionality and redirecting to login page if not logged in
- Storing selected date and time for booking appointment

Implementing the functionality to book a doctor appointment
- Setting the slot date and time, adding doctor ID, and providing headers
- Checking the response for success, displaying a toast notification, updating the doctor's data, and handling errors

Fixing 'get doctor's data is not a function' error
- Corrected the function to 'get doctor's data' in app context.jsx file
- Successfully booked and managed appointments, showing availability based on booked slots

Ensuring slot availability based on date and time
- Check for slot date and existing bookings to determine slot availability
- Implement logic to remove already booked slots and display available slots

Creation of controller function to get user appointments
- Adding API comment to get user appointments for frontend
- Using appointment model to fetch appointments by user ID and sending response

Setting up API connection and fetching data
- Importing and using the Axios package to make API calls and handle responses
- Handling API endpoint concatenation, adding headers with token, and processing response data

Modify doctor data entries to display correctly on the webpage
- Provide doctor's image using item.docData.image
- Include doctor's name, speciality, address, date, and time appropriately

Creating a function in MERN stack to format dates for doctor appointment booking
- Adding all months from January to December in an array
- Creating an arrow function 'slotDateFormat' to format dates in 'day month year' format

Creating logic to cancel appointments
- Add API to cancel appointment
- Create an asynchronous function to handle cancellation logic

Extract doctor's data and update slots
- Retrieve doctor data using doctor ID
- Modify slots booked data and update with latest data

Integrating cancel appointment API with frontend
- Creating cancel appointment controller function in user route
- Defining cancel appointment function in frontend to call the API

Toggle buttons based on appointment status
- Check the 'cancelled' property in the database to determine if appointment is cancelled or not
- Hide 'Cancel Appointment' and 'Pay Online' buttons if appointment is already cancelled

Adding logic to display cancelled appointments
- Added conditional logic to display 'Appointment Cancelled' button when appointments are cancelled.
- Tested the functionality by booking and cancelling appointments, and saw the changes reflected in the UI.

Integrating Razorpay for payment processing in backend project
- Install Razorpay package and run backend server
- Initialize Razorpay instance with key ID and key secret obtained from Razorpay website

Setting up Razorpay key ID and key secret in environment variables.
- Create two environment variables for Razorpay key ID and key secret.
- Utilize the key ID and key secret from environment variables for payment processing.

Creating payment using Razorpay and integrating with MERN stack
- Adding environment variables for process and currency
- Creating order using Razorpay and handling the response

Adding payment functionality to doctor appointment booking system
- Creating a function to make the payment of the appointment fee with the appointment ID
- Linking the function with the pay online button, making an API call to handle the payment process

Adding Razorpay key ID in backend and frontend for payments
- Razorpay key ID is added to the backend environment variables
- Key ID is then added to the frontend environment file for secure usage

Using Razorpay to initiate and process payments
- Creating payment options and opening Razorpay as a popup
- Initiating payment and simulating successful execution

Implementing Razer pay order ID validation in user route
- Creating the API endpoint for verifying Razer pay order
- Testing the API endpoint using Thunder client and adding token for authorization

Verify payment status and update payment in appointment model
- Verify payment status received using Razorpay
- Update the appointment model to mark payment as true

Connecting the Reser pay verification API with the Handler
- Handling the error and displaying a toast notification
- Testing the payment process and updating the web page accordingly

Implementing payment logic for appointment booking system
- Add styling to the pay online button with specific CSS classes for better UI
- Implement logic to hide pay online button after successful payment and display appropriate buttons based on payment status

Creating API endpoint for admin panel appointments retrieval
- Defining success and appointments array in the response JSON object
- Implementing controller function to fetch appointments data and setting up API route in admin route file

Creating a state variable and initializing with empty value
- Concatenating the API endpoint path and providing admin token
- Checking success condition and displaying toast notification if not true

Styling the appointment booking system interface
- Adding CSS properties to customize the container and increase its height
- Formatting the appointments data to display in a table format

Display patient details in appointments and add CSS properties.
- Add key property to div tag and display appointment serial numbers.
- Display patient image and name in appointments with CSS properties.

Implementing a function to calculate age and formatting the date and time
- Created a calculate age function and added it to the value object to access it in any component
- Formatted the date and time of the appointment based on the Figma design

Implementing logic for displaying doctor's details and fee in the booking system
- Adding slot date formatting function to enable use in any component
- Displaying doctor's image, name, and fee with currency symbol in the system

Implementing appointment cancellation feature with CSS styling.
- Adding conditional logic for displaying cancel button or cancel text based on appointment status.
- Implementing CSS styling with class name property for the cancel text.

Creating admin route to cancel appointments
- Adding admin router with a post method for canceling appointments
- Linking the cancel appointment API with the admin panel and creating the function to cancel appointments

Fetching data and details for doctor appointment booking system
- Adding try catch block for error handling and console log
- Fetching total number of users, appointments, and latest appointments

Set up appointments, patients, and latest appointments in MERN stack
- Add appointments, patients, and latest appointments properties with reverse order slicing
- Create admin dashboard controller function with success property and dash data

Implementing dashboard functionality with admin token and appointment data
- Setting up admin token and appointment data retrieval using use context hook and useEffect
- Displaying the retrieved data in the UI within the dashboard component

Building structure and layout for Doctor Appointment Booking System
- Creating div elements and adding class names for styling
- Inserting images, paragraphs, and connecting with API data for doctors, appointments, and patients

Styling doctor's appointments and displaying latest bookings
- Applying CSS properties for text and class names for styling
- Creating div and image tags to display latest bookings with appropriate classes

Creating a div with classes and adding doctor's image and name
- Adding padding top and setting border
- Using map method to iterate over the appointments array and displaying doctor's image, name, and slot date

Creating doctor and admin dashboards.
- Format dates correctly using provided function in app context.
- Implement functionalities for admin and doctor dashboards, including adding new doctors and managing their availability.

Implementing authentication for doctors using email and password
- Extract email and password from the request to authenticate the doctor.
- Check if the password matches with the password saved in the database for the corresponding email ID.

Creating a login API route for doctors.
- Adding else statement with response for invalid credentials in login function.
- Testing the API by sending a post request with doctor's email and password.

Configuring doctor's profile and implementing login functionality
- Correcting email ID and implementing successful login API response validation
- Adding logic in login.jsx file to allow doctors to login by saving authentication token

Implemented logic to handle doctor login using token value
- Updated logic in context.jsx file to use token value for doctor login
- Tested and verified doctor login functionality by adding email ID and password

Creating multiple pages for doctor appointment booking system
- Adding doctor context and authentication token for access control
- Creating separate pages for doctor appointments, profile, and dashboard with specific functionalities

Setting up Doctor Dashboard with Appointments and Profile
- Customizing dashboard layout with appointments and profile sections.
- Creating API endpoint to display appointments for logged-in doctor.

Creating doctor authentication middleware
- Copying code from user.js to doctor.js and making necessary changes
- Creating a controller function to get all the appointments of a specific doctor

Setting up API calls to fetch appointments data
- Creating a state variable to store appointments data
- Developing asynchronous arrow function 'getAppointments' to handle API calls

Handling appointment data based on success status
- Checking if data success is true and saving appointments
- Displaying toast notification if data success is false

Display doctor appointment data in table format on web page
- Create UI part of Dr appointments.jsx file in VS Code editor
- Structure response data and add CSS properties for content

Design optimization for smaller screens
- Added class name property to hide elements on smaller screens and display on larger screens
- Optimized UI design by adjusting layout for better visibility on different screen sizes

Using user data to calculate age and display it in the appointment
- Importing and using the calculate age function from app context in Doctor Appointments component
- Using the slot date format function to display the date and time of the appointment

Adding currency symbol and amount in the appointment booking system.
- Obtained currency symbol from the app context and integrated it into the system.
- Created a cancel and complete appointment button with corresponding icons and added CSS for proper layout.

Successfully booked appointment and managing appointments in admin panel
- Booked an appointment with the same doctor, changed time and date, and successfully booked
- Managed appointments in the admin panel, can view and work with appointments

Authenticate doctor for appointment completion
- Use appointment model to find appointment by ID
- If appointment data and doctor ID match, mark appointment as completed

Create a function to mark appointment as completed
- Define an arrow function to accept appointment ID parameter and make API call to mark appointment as completed
- If success, display success toast notification and update appointments data; if failed, display error toast notification

Creating functions to cancel appointments
- Create a copy of the existing function and change the function name to cancel appointment
- Pass the cancel appointment function and appointment ID to other components for access

Handle appointment status with detailed messages and CSS styling
- Display 'cancelled' message if appointment is cancelled
- Display 'completed' message if appointment is completed, else show cancel buttons

Build Doctor Appointment Dashboard
- Create dashboard to display earnings, patients, appointments
- Implement API to get dashboard data for doctor panel

Creating dashboard data for earnings and appointments
- Add earnings and total appointments data to the dashboard
- Include information on unique patients and latest appointments, then send dashboard data as a response

Setting up API endpoint for doctor dashboard page
- Creating UI for doctor dashboard and storing data in state variable
- Implementing API call to fetch data and save response in state variable

Displaying appointments and patient data on UI
- Appointments and patients data are displayed based on bookings and new account logins.
- UI components are added as per Figma design for displaying data.

Integrating currency symbol in earnings display
- Add currency symbol to earnings display for better clarity
- Fix error by importing slot date format function from App context

Creating doctor profile controller function
- Getting doctor profile data using doctor ID and removing password property
- Creating response with success property and doctor profile data

Updating doctor data with new fee, address, and availability
- Providing doctor ID to find and update details
- Creating response JSON with success message after update

Fetching and displaying profile data for the logged-in doctor
- Getting profile data from Doctor context and App context using useContext hook
- Displaying the profile data, including the doctor's image, on the profile page

Display doctor's information
- Create div to display name, degree, and experience
- Add paragraph tags to display the respective information

Adding CSS properties to the elements for styling
- Specific CSS properties added to the profile image, container, doctor's name, and text elements for improved styling.
- Classes and properties like background color, font size, border radius, and text color were utilized.

Implement styling for various elements
- Adding class names and properties to style text size, font, color, width, and margin
- Applying CSS properties like Flex Gap, padding to create spacing and alignment

Using state to toggle between displaying text and input field for appointment fee editing.
- Toggle the edit state to true using setState when clicking on the edit button, triggering the display of an input field instead of a paragraph tag for editing the appointment fee.
- Utilize the spread operator in the setter function to update the fee using the previous state and the new input value, ensuring only the fee is updated.

Updating and editing data in the input field
- Adding the ability to edit data and update it in the input field
- Implementing the nested spread operator to update specific properties of the address object

Updating and saving changes in the doctor appointment booking system.
- Ability to edit and update address, fee, and availability status.
- Adding logic to save changes to the database using an API call.

Updating doctor profile data using MERN Stack
- Updating fee, address, and availability in doctor profile
- Making API call to update profile data and handling success and error scenarios

Fixing display of pay online and cancel options
- Editing the code in vs code editor to add conditions for not displaying pay online and cancel buttons if the appointment is completed
- Adding conditions to remove pay online and cancel buttons once the appointment is marked as completed

Fixing logout feature for doctor account
- Add doctor token and implement logout functionality
- Fix logout feature by checking and removing doctor token from local storage

Using nested ternary operator to display different messages based on appointment status
- Checking if appointment is cancelled and displaying appropriate message
- We are updating the dashboard and doctor panel to display appointment status and allowing doctor to change availability status

Updating doctor availability status and styling the UI
- Changes made in doctor's dashboard to display 'doctor not available' message
- Updated styling in top doctors file to show availability status using dynamic classes and background colors

Completed doctor appointment booking system using MERN Stack
- Created doctor panel for managing details and appointments
- Developed admin panel with dashboard to manage doctors and appointments